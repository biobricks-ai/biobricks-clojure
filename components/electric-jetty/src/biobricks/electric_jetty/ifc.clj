(ns biobricks.electric-jetty.ifc
  (:require [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [clojure.tools.logging :as log]
            [hyperfiddle.electric-ring-adapter :as electric-ring]
            [ring.adapter.jetty :as ring]
            [ring.middleware.content-type :refer [wrap-content-type]]
            [ring.middleware.cookies :as cookies]
            [ring.middleware.params :refer [wrap-params]]
            [ring.middleware.resource :refer [wrap-resource]]
            [ring.util.response :as res])
  (:import [java.io IOException]
           [java.net BindException]
           [org.eclipse.jetty.server.handler.gzip GzipHandler]))

(defn template
  "Takes a `string` and a map of key-values `kvs`. Replace all instances of `$key$` by value in `string`"
  [string kvs]
  (reduce-kv (fn [r k v] (str/replace r (str "$" k "$") v)) string kvs))

(defn get-modules
  [manifest-path]
  (when-let [manifest (io/resource manifest-path)]
    (let [manifest-folder (when-let [folder-name (second (rseq (str/split
                                                                 manifest-path
                                                                 #"\/")))]
                            (str "/" folder-name "/"))]
      (->> (slurp manifest)
        (edn/read-string)
        (reduce (fn [r module]
                  (assoc r
                    (keyword "hyperfiddle.client.module"
                      (name (:name module)))
                    (str manifest-folder (:output-name module))))
          {})))))

(defn wrap-index-page
  "Server the `index.html` file with injected javascript modules from `manifest.edn`. `manifest.edn` is generated by the client build and contains javascript modules information."
  [next-handler {:keys [resources-path manifest-path]}]
  (fn [ring-req]
    (if-let [response (res/resource-response (str resources-path
                                               "/index.html"))]
      (if-let [modules (get-modules manifest-path)]
        (-> (res/response (template (slurp (:body response)) modules)) ; TODO
                                                                       ; cache
                                                                       ; in prod
                                                                       ; mode
          (res/content-type "text/html") ; ensure `index.html` is not cached
          (res/header "Cache-Control" "no-store")
          (res/header "Last-Modified"
            (get-in response [:headers "Last-Modified"])))
        ;; No t found, can't inject js modules
        (-> (res/not-found "Missing client program manifest")
          (res/content-type "text/plain")))
      ;; index.html file not found on classpath
      (next-handler ring-req))))

(defn electric-websocket-middleware
  [next-handler {:as config :keys [entrypoint]}]
  (-> (electric-ring/wrap-electric-websocket next-handler entrypoint) ; 4. connect electric client
    (cookies/wrap-cookies) ; 3. makes cookies available to Electric app
    (electric-ring/wrap-reject-stale-client config) ; 2. reject stale electric client
    (wrap-params) ; 1. parse query params
    ))

(defn not-found-handler
  [_ring-request]
  (-> (res/not-found "Not found")
    (res/content-type "text/plain")))

(defn wrap-extra-middleware [handler config]
  (loop [handler handler
         [f & more] (:extra-middleware config)]
    (if f
      (recur (f handler) more)
      handler)))

(defn http-middleware
  [{:as config :keys [resources-path]}]
  ;; these compose as functions, so are applied bottom up
  (-> not-found-handler
    (wrap-index-page config)
    (wrap-resource resources-path)
    (wrap-extra-middleware config)
    wrap-content-type
    (electric-websocket-middleware config)))

(defn- add-gzip-handler
  "Makes Jetty server compress responses. Optional but recommended."
  [server]
  (.setHandler server
    (doto (GzipHandler.)
      (.setMinGzipSize 1024)
      (.setHandler (.getHandler server)))))

(defn start-server!
  [config]
  (let [{:as config :keys [host port]}
        #__ (merge
              {:port 8080,
               :resources-path "public",
               :manifest-path "public/js/manifest.edn"}
              config)]
    (try
      (let [server (ring/run-jetty
                     (http-middleware config)
                     (merge {:join? false,
                             :configurator add-gzip-handler}
                       config))
            final-port (-> server
                         (.getConnectors)
                         first
                         (.getPort))
            app-host (if (= "0.0.0.0" host) "localhost" host)]
        (println "\nðŸ‘‰ App server available at"
          (str "http://" app-host ":" final-port "\n"))
        server)
      (catch IOException err
        (if (instance? BindException (ex-cause err))
          ; port is already taken, retry with another one
          (do (log/warn "Port" port "was not available, retrying with" (inc port))
            (start-server! (update config :port inc)))
          (throw err))))))
